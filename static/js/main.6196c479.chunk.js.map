{"version":3,"sources":["fonts/Quicksand-Medium.ttf","fonts/Quicksand-Regular.ttf","fonts/Signika-Regular.ttf","fonts/Signika-SemiBold.ttf","history.js","Components/Header.js","Components/PlayerSetup/PlayerForm.js","Components/PlayerSetup/PlayerList.js","Components/PlayerSetup/PlayerSetup.js","Components/PlayerSetup/index.js","Components/TournamentView/ScoreInput.js","Components/TournamentView/TournamentCard.js","Components/TournamentView/TournamentRound.js","Components/TournamentView/index.js","Components/TournamentView/Tournament.js","Components/ResultsView/ResultCard.js","Components/ResultsView/index.js","Components/ResultsView/ResultsPage.js","App.js","serviceWorker.js","Data/reducer.js","index.js","Data/initial.js"],"names":["module","exports","createBrowserHistory","basename","className","addPlayer","useState","playerName","setPlayerName","Container","Form","Group","Label","Control","onChange","e","currentTarget","value","Row","Button","onClick","preventDefault","variant","type","players","map","player","i","key","PlayerSetup","handleSubmit","playerList","setPlayerList","PlayerForm","PlayerList","length","connect","dispatch","history","push","p1Name","p2Name","display","submitScore","styling","p1Score","setp1Score","p2Score","setp2Score","handleChange","score","valueAsNumber","console","log","style","alert","onWinnerClick","player1","player2","matchIndex","roundIndex","played","scoreDisplay","setScoreDisplay","opacity","ScoreInput","round","handleResult","roundTitle","match","TournamentCard","p1","name","p2","player1ID","id","player2ID","rounds","playerCount","matchNumber","TournamentRound","title","winner","runnerUp","ResultCard","App","Header","exact","path","component","Tournament","ResultsPage","Boolean","window","location","hostname","allocateMatches","state","allMatchesPlayed","tournamentComplete","playerPosition","newRound","activePlayers","filter","eliminated","x","y","result","qualifiers","findExcess","num","numOfMatches","reducer","action","array","placeholder","Math","floor","random","shuffle","newPlayerList","wins","pointsWon","pointsConceded","addPlayers","final","winnerID","loserID","find","tournamentResults","finalResults","matchesPlayed","newRounds","loserIndex","findIndex","winnerIndex","updateResult","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6196c479.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Quicksand-Medium.75365efd.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Quicksand-Regular.316c2321.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Signika-Regular.ba0080fa.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Signika-SemiBold.b355f4bd.ttf\";","import createBrowserHistory from 'history/createBrowserHistory';\n\nexport default createBrowserHistory({ basename: '/table-tennis-tournament' })","import React from 'react'\n\nexport default () => (\n\n    <header className=\"mainHeader\">\n\n        <h1>Table Tennis Tournament</h1>\n\n    </header>\n    \n)","import React, {useState} from 'react'\nimport {Form, Button, Container, Row} from 'react-bootstrap'\n\nexport default ({addPlayer}) => {\n\n    const [playerName,setPlayerName] = useState('')\n\n    const handleChange = e => {\n\n        setPlayerName(e.currentTarget.value)\n\n    }\n\n    const handleSubmit = e => {\n\n        //Here the addPlayer function is called and the player Name is reset\n\n        e.preventDefault()\n\n        if (playerName) addPlayer(playerName)\n\n        setPlayerName('')\n\n    }\n\n    return (\n        <Container className=\"playerInput my-2\">\n            <Form>\n                <Form.Group>\n                    <Form.Label>Enter Names Here</Form.Label>\n                    <Form.Control onChange={handleChange} value={playerName}></Form.Control>\n                </Form.Group>\n                <Row className=\"justify-content-center\">\n                    <Button \n                        onClick={handleSubmit} \n                        variant=\"primary\" \n                        type=\"submit\"\n                        >Add Name\n                    </Button>\n                </Row>\n            </Form>\n        </Container>\n        \n    )\n\n}","import React from 'react'\nimport {Container} from 'react-bootstrap'\n\nexport default ({players}) => {\n\n    return (\n\n        <Container>\n\n            <ul className=\"playerList\">\n\n                { players.map((player,i) => (\n\n                    <li className=\"playerListName\" key={i}><h4>{player}</h4></li>\n\n                ))}\n\n            </ul>\n\n        </Container>\n\n    )\n\n}","import React ,{useState} from 'react'\nimport PlayerForm from './PlayerForm'\nimport PlayerList from  './PlayerList'\nimport {Container,Row,Button} from 'react-bootstrap'\n\nconst PlayerSetup = ({handleSubmit}) => {\n\n    //The player list is held in state here\n\n    const [playerList, setPlayerList] = useState([])\n\n    const addPlayer = (playerName) => {\n\n        // This add player function is passed down through props to the form\n\n        setPlayerList([...playerList,playerName])\n\n    }\n\n    return (\n        <Container>\n            <PlayerForm addPlayer={addPlayer} />\n            <PlayerList players={playerList} />\n            <Row className=\"justify-content-center\">\n                { playerList.length >= 2 \n                    ? <Button onClick={() => handleSubmit(playerList)}>Start Tournament</Button>\n                    : null\n                }\n            </Row>\n        </Container>\n        \n    )\n\n}\n\nexport default PlayerSetup","import PlayerSetup from './PlayerSetup'\nimport { connect } from 'react-redux'\nimport history from '../../history'\n\nconst mapDispatchtoProps = dispatch => {\n\n    return {\n\n        handleSubmit: (players) => {\n            \n            dispatch({ type:\"ADD_PLAYERS\", playerList: players})\n\n            history.push('/tournament')\n            \n        }\n    }\n\n}\n\nexport default connect(null, mapDispatchtoProps)(PlayerSetup)","import React, {useState} from 'react'\nimport {Container,Form,Button}  from  'react-bootstrap'\n\nexport default ({p1Name,p2Name,display,submitScore}) => {\n\n    let styling = {\n        display: display,\n    }\n\n    let [p1Score,setp1Score] = useState(0)\n    let [p2Score,setp2Score] = useState(0)\n\n    const handleChange = (e,player) => {\n\n        let score = e.currentTarget.valueAsNumber\n\n        player === 'p1' ? setp1Score(score)\n            : setp2Score(score)\n\n        console.log(score);\n        console.log(score)\n\n    }\n\n    const handleClick = () => {\n\n        p1Score >= 21 || p2Score >= 21 ?\n            submitScore(p1Score,p2Score) :\n            alert('One of the players must have scored at least 21 points to win')\n\n    }\n\n    return (\n        <Container className='scoreForm' style={styling}>\n\n            <Form>\n            \n                <Form.Group>\n                    <Form.Label className=\"text-light\">{p1Name} Score</Form.Label>\n                    <Form.Control \n                        onChange={(e) => handleChange(e,'p1')}\n                        value={p1Score}\n                        type='number'>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label className=\"text-light\">{p2Name} Score</Form.Label>\n                    <Form.Control \n                        onChange={(e) => handleChange(e,'p2')}\n                        value={p2Score}\n                        type='number'></Form.Control>\n                </Form.Group>\n\n                <Button onClick={handleClick}>Submit Score</Button>\n\n            </Form>\n\n        </Container>\n    )\n\n}","import React , {useState} from 'react'\nimport {Container} from 'react-bootstrap'\nimport ScoreInput from './ScoreInput'\n\nexport default ({\n    onWinnerClick,\n    player1,\n    player2,\n    matchIndex,\n    roundIndex,\n    played,\n}) => {\n\n    const [scoreDisplay,setScoreDisplay] = useState('none')\n\n    const handleClick = () => {\n\n        return played ? null : setScoreDisplay('block')\n            \n    }\n\n    const submitScore = (p1Score,p2Score) => {\n\n        setScoreDisplay('none')\n\n        return onWinnerClick(matchIndex,roundIndex, p1Score, p2Score)\n\n    }\n\n    return (\n\n        <>\n\n        <Container onClick={handleClick} className=\"tournamentCard\" style={played ? {opacity: 0.5} : null}>\n\n            {/* On click the opposite players id is handed up as the function looks\n            to receive the player to eliminate*/}\n\n            {/* The key is passed down as the match id*/}\n\n            <h4>{player1}</h4>\n            <h4>VS</h4>\n            <h4>{player2}</h4>\n\n        </Container>\n\n        <ScoreInput \n            p1Name={player1} \n            p2Name={player2} \n            display={scoreDisplay}\n            submitScore={submitScore} \n        />\n\n        </>\n\n    )\n\n}","import React from 'react'\nimport TournamentCard from './TournamentCard'\nimport {Container} from 'react-bootstrap'\n\nexport default ({round,handleResult,roundIndex,roundTitle}) => {\n\n    return (\n\n        <Container>\n\n            <h3>{roundTitle}</h3>\n\n            <div className=\"cardWrapper\">\n\n                { round.map((match,matchIndex) => (\n\n                    <TournamentCard \n                        onWinnerClick={handleResult}\n                        played={match.played}\n                        key={matchIndex}\n                        roundIndex={roundIndex}\n                        matchIndex={matchIndex}\n                        player1={ match.p1.name }\n                        player2={ match.p2.name }\n                        player1ID={match.p1.id}\n                        player2ID={match.p2.id}\n                    />\n\n                ))}\n\n            </div>\n\n        </Container>\n\n    )\n\n}","import Tournament from './Tournament'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = ({rounds,players}) => ({rounds,players})\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        \n        handleResult: (matchIndex,roundIndex,p1Score,p2Score) => {\n\n            dispatch({ type:\"RESULT_ENTRY\", matchIndex,roundIndex,p1Score, p2Score})\n\n        }\n\n    }\n\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Tournament);\n\n","import React from 'react'\nimport TournamentRound from './TournamentRound'\nimport {Container} from 'react-bootstrap'\n\nexport default ({rounds,handleResult,players}) => {\n\n    const playerCount = players.length\n\n    return (\n\n        <Container className=\"tournamentWrapper\">\n\n            { rounds.map((round,roundIndex) => { \n\n                const matchNumber = round.length\n                let roundTitle = `Round of ${matchNumber*2}`\n\n                if (matchNumber !== playerCount/2 && roundIndex === rounds.length - 1) {\n\n                    roundTitle = 'Qualifiers'\n\n                } else if (matchNumber === 4) {\n\n                    roundTitle = 'Quarter-finals'\n\n                } else if (matchNumber === 2) {\n\n                    roundTitle = 'Semi-finals'\n\n                } else if (matchNumber === 1) {\n\n                    roundTitle = 'Final'    \n\n                }\n\n                return (\n                    <TournamentRound\n                        key={roundIndex} \n                        round={round} \n                        handleResult={handleResult} \n                        roundIndex={roundIndex}\n                        roundTitle={roundTitle}  \n                    />\n                )\n\n            })}\n\n        </Container>\n\n    )\n\n}","import React from 'react'\nimport {Container} from 'react-bootstrap'\n\nexport default ({title,playerName}) => {\n\n   return (\n\n        <Container className=\"resultCard\">\n            <h3>{title}</h3>\n            <h3>{playerName}</h3> \n        </Container>\n\n    )\n\n}\n","import {connect} from 'react-redux'\nimport ResultsPage from './ResultsPage'\n\nconst mapStateToProps = ({winner,runnerUp}) => ({winner,runnerUp}) \n\nexport default connect(mapStateToProps)(ResultsPage)","import React from 'react'\nimport ResultCard from './ResultCard'\nimport {Container} from 'react-bootstrap'\n\nexport default ({winner,runnerUp}) => {\n\n    return (\n\n        <Container>\n            <ResultCard title='The Winner' playerName={winner.name} />\n            <ResultCard title='Runner-up' playerName={runnerUp.name} />\n        </Container>\n\n    )\n\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Router, Route} from 'react-router-dom'\nimport history from './history'\n\nimport Header from './Components/Header'\nimport PlayerSetup from './Components/PlayerSetup';\nimport Tournament from './Components/TournamentView/'\nimport ResultsPage from './Components/ResultsView/'\n\nfunction App() {\n  \n  return(\n  \n    <Router history={history}>\n      <Header />\n\n      <Route exact path='/'>\n        <PlayerSetup />\n      </Route>\n\n      <Route path='/tournament' component={Tournament} />\n\n      <Route exact path='/results' component={ResultsPage}/>  \n    </Router>\n\n  )\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import history from '../history'\n\nconst addPlayers = (state,{playerList}) => {\n\n    // variable below is a formatted version of the player names for the state\n\n    const newPlayerList = playerList.map((player,i) => {\n\n        return {\n\n            id: i+1,\n            name: player,\n            wins: 0,\n            pointsWon: 0,\n            pointsConceded: 0,\n            eliminated: false\n\n        }\n\n    })\n\n    return {\n\n        ...state,\n        players: newPlayerList\n\n    }\n\n}\n\nconst shuffle = state => {\n\n    //I used a method called the Fisher-Yates shuffle to randomise this\n\n    let array = state.players\n\n    let length = array.length\n    let placeholder = 0\n    let i = 0\n\n    while (length) {\n\n        i = Math.floor(Math.random() * length--)\n\n        placeholder = array[length]\n        array[length] = array[i]\n        array[i] = placeholder\n\n    }\n\n    return {\n\n        ...state,\n        players: array\n\n    }\n\n}\n\nconst allocateMatches = (state) => {\n\n    //This checks if all the matches in the round have been played \n    //or the tournament is finished\n\n    if (!state.allMatchesPlayed || state.tournamentComplete) return {...state}\n\n    let playerPosition = 0\n    const players = state.players\n    let newRound = []\n\n    let activePlayers = players.filter(player => player.eliminated === false)\n\n    let x = 2\n    let y = 0\n    let result = 0\n\n    let findExcess = (num) => {\n    \n        let next = () => {\n            y = x\n            x *= 2\n            findExcess(num)\n        }\n        \n        let excess = () => {\n            return !(num - x) ? 0 : num - y\n        }\n    \n        num > x ? next() : result = excess()\n\n        return result\n    \n    }\n\n    let qualifiers = findExcess(activePlayers.length)\n\n    console.log(`the number of active players is ${activePlayers.length}`)\n    console.log(`the excess result is ${qualifiers}`)\n\n    //Checks that the players have not been eliminated\n\n    const numOfMatches = qualifiers ? qualifiers : activePlayers.length/2\n\n    for (let i=0 ; i<numOfMatches ; i+=1) {\n\n        newRound.push({\n\n            id: i+1,\n            p1: activePlayers[playerPosition],\n            p2: activePlayers[playerPosition+1],\n            played: false,\n            \n        })\n\n        playerPosition += 2\n\n    }\n\n    return {\n        ...state,\n        rounds: [\n            newRound,\n            ...state.rounds,\n        ],\n        allMatchesPlayed: false,\n    }\n\n}\n\nconst updateResult = (state,{matchIndex,roundIndex,p1Score,p2Score}) => {\n\n    //Below is the logic for changing the match played\n\n    let newRounds = [...state.rounds]\n\n    newRounds[roundIndex][matchIndex] = {\n        ...newRounds[roundIndex][matchIndex],\n        played: true,\n        p1Score,\n        p2Score\n    }\n\n   /*  newRounds[roundIndex][matchIndex].played = true\n\n    newRounds[roundIndex][matchIndex].winner = winnerID\n\n    newRounds[roundIndex][matchIndex].p1Score = p1Score */\n    //Below is the logic for changing the player eliminated\n\n    let loserIndex = (p1Score < p2Score \n        ? state.players.findIndex(player => \n            player.id === newRounds[roundIndex][matchIndex].p1.id\n        )\n        : state.players.findIndex(player => \n            player.id === newRounds[roundIndex][matchIndex].p2.id\n        )\n    )\n\n    let winnerIndex = (p1Score > p2Score \n        ? state.players.findIndex(player => \n            player.id === newRounds[roundIndex][matchIndex].p1.id\n        )\n        : state.players.findIndex(player => \n            player.id === newRounds[roundIndex][matchIndex].p2.id\n        )\n    )\n    \n    console.log(`Player 1 scored ${p1Score} points`)\n    console.log(`Player 2 scored ${p2Score} points`)\n    console.log(`The winner index is ${winnerIndex}`)\n    console.log(`The loser index is ${loserIndex}`)\n    \n\n    let newPlayerList = [...state.players]\n\n    newPlayerList[loserIndex] = {\n        ...newPlayerList[loserIndex],\n        eliminated: true,\n        pointsWon: newPlayerList[winnerIndex].pointsWon + p1Score < p2Score ? p1Score : p2Score,\n        pointsConceded: newPlayerList[winnerIndex].pointsConceded + p1Score > p2Score ? p1Score : p2Score\n    }\n    newPlayerList[winnerIndex] = {\n        ...newPlayerList[winnerIndex],\n        wins: newPlayerList[winnerIndex].wins + 1,\n        pointsWon: newPlayerList[winnerIndex].pointsWon + p1Score > p2Score ? p1Score : p2Score,\n        pointsConceded: newPlayerList[winnerIndex].pointsConceded + p1Score < p2Score ? p1Score : p2Score\n    }\n\n    //Below is to check if that was the last game\n\n    let checkElims = newPlayerList.filter(player => !player.eliminated).length\n\n    let final = checkElims === 1\n\n    return {\n        ...state,\n        rounds: newRounds,\n        players: newPlayerList,\n        tournamentComplete: final\n    }\n\n}\n\nconst matchesPlayed = state => {\n\n    //Checks if all the matches in the round have been played\n\n    let round = state.rounds[0]\n\n    return round.find(match => !match.played) \n        ? {...state}  \n        : {\n            ...state,\n            allMatchesPlayed : true\n        } \n}\n\nconst finalResults = state => {\n\n    let {tournamentComplete,rounds,players} = state;\n\n    let tournamentResults = () => {\n\n        history.push('./results')\n\n        //Identifies the final from the rounds array\n\n        const final = rounds[0][0]\n\n        const winnerID = final.p1Score > final.p2Score ? final.p1.id : final.p2.id\n        const loserID = final.p1Score < final.p2Score ? final.p1.id : final.p2.id\n\n        //Identifies the losers id based on the winners i\n\n        return {\n            ...state,\n            winner: players.find(player => player.id === winnerID),\n            runnerUp : players.find(player => player.id === loserID)\n        }\n\n    }\n\n    return tournamentComplete ? tournamentResults() : state\n\n}\n\n\nconst reducer = (state,action) => {\n\n    switch(action.type) {\n\n        case \"ADD_PLAYERS\": return allocateMatches(shuffle(addPlayers(state,action)))\n        case \"RESULT_ENTRY\": return (\n            finalResults(allocateMatches(matchesPlayed(updateResult(state,action))))\n        )\n        default: return state\n\n    }\n\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport initial from './Data/initial'\nimport reducer from './Data/reducer'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './fonts/Quicksand-Medium.ttf'\nimport './fonts/Quicksand-Regular.ttf'\nimport './fonts/Signika-Regular.ttf'\nimport './fonts/Signika-SemiBold.ttf'\n\n\nconst store = createStore(\n  reducer, \n  initial,\n  window.__REDUX_DEVTOOLS_EXTENSION__ \n    && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n\n    players: [],\n    rounds: [],\n    allMatchesPlayed: true,\n    tournamentComplete: false,\n    winner: {},\n    runnerUp: {}\n\n}"],"sourceRoot":""}